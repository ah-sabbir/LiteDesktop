// this is main.js file or main process of electron app

import { app, BrowserWindow, contextBridge, desktopCapturer, ipcMain, ipcRenderer  } from 'electron';
import windowStateKeeper from 'electron-window-state';
import {sleep, screen, pixelWithColor} from '@nut-tree/nut-js';
import {mouse, keyboard, straightTo} from '@nut-tree/nut-js';

// import SimplePeer from 'simple-peer';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

// import { RTCPeerConnection, RTCDataChannel } from 'webrtc';
// import { Peer } from 'peerjs';

// const peer = new SimplePeer();

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// let localClient: any;
// let remoteClient: any;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// if (require('electron-squirrel-startup')) {
//   app.quit();
// }
if (require('electron-squirrel-startup') === true) app.quit();




const createWindow = async () => {

  // const peer = new Peer();

  // peer.on('open', (id) => {
  //   console.log('My peer ID is: ' + id);
  // });


  const mainWindowState = windowStateKeeper({
    defaultWidth: 1000,
    defaultHeight: 800
  });
  
  
  // createLocalClient();
  // createRemoteClient();
  // await createWebRTCConnection();
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    x: mainWindowState.x,
    y: mainWindowState.y,
    minWidth: mainWindowState.width,
    minHeight: mainWindowState.height,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // Desktop Capturer
  ipcMain.handle('get-sources', () => {
    return desktopCapturer.getSources({ types: ['window', 'screen'] }).then(async sources => {
      for (const source of sources) {
        if (source.name === 'Electron') {
          return source.id;
        }
      }
    })
   });


  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  mainWindowState.manage(mainWindow);
    // Open the DevTools.
    // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
// app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.


async function printScreen(){
  const width = await screen.width();
  const height = await screen.height();
  const screenUri = await screen.capture('screenshot.png');
  const m = await mouse.getPosition();
  console.log({width:width, height:height},screenUri, m);
}

app.whenReady().then(() => {
  if (BrowserWindow.getAllWindows().length === 0) {
    printScreen();
    createWindow();
  }
});


app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// contextBridge.exposeInMainWorld('electron', {
//   getSources: () => ipcRenderer.invoke('get-sources'),
// });


// app.on('activate', () => {
//   // On OS X it's common to re-create a window in the app when the
//   // dock icon is clicked and there are no other windows open.
//   if (BrowserWindow.getAllWindows().length === 0) {
//     createWindow();
//   }
// });

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


