import { app, BrowserWindow } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

import { RTCPeerConnection, RTCDataChannel } from 'webrtc';
import { Peer } from 'peerjs';



declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let localClient: any;
let remoteClient: any;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}




const createWindow = async () => {
  
  createLocalClient();
  createRemoteClient();
  await createWebRTCConnection();
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const createLocalClient = (): void => {
  localClient = new Peer();
  localClient.on('connection', (remote: any) => {
    console.log('Remote client connected');
    remoteClient = remote;
  });
  localClient.on('error', (error: any) => {
    console.log('Error connecting to remote client:', error);
  });
};

const createRemoteClient = (): void => {
  remoteClient = new Peer();
  remoteClient.on('connection', (local:any) => {
    console.log('Local client connected');
    localClient = local;
  });
  remoteClient.on('error', (error: any) => {
    console.log('Error connecting to local client:', error);
  });
};

const createWebRTCConnection = async () => {
  const localConnection = new RTCPeerConnection();
  const remoteConnection = new RTCPeerConnection();

  const localDataChannel = await localConnection.createDataChannel('data');
  const remoteDataChannel = await remoteConnection.createDataChannel('data');

  localConnection.ondatachannel = (event: any) => {
    if (event.channel.label === 'data') {
      const data = event.data;
      console.log('Received data from remote client:', data);
    }
  };

  remoteConnection.ondatachannel = (event: any) => {
    if (event.channel.label === 'data') {
      const data = event.data;
      console.log('Received data from local client:', data);
    }
  };

  localConnection.addStream(
    await remoteClient.remote.webContents.getRemoteObject('navigator').mediaDevices.getUserMedia({ video: true, audio: true })
  );
  remoteConnection.addStream(
    await localClient.remote.webContents.getRemoteObject('navigator').mediaDevices.getUserMedia({ video: true, audio: true })
  );
  localConnection.oniceconnectionstatechange = () => {
    if (localConnection.iceConnectionState === 'connected') {
      console.log('WebRTC connection established');
      remoteClient.send('hello');
    }
  };

  remoteConnection.oniceconnectionstatechange = () => {
    if (remoteConnection.iceConnectionState === 'connected') {
      console.log('WebRTC connection established');
      localClient.send('hello');
    }
  };

  localConnection.onclose = () => {
    console.log('Local connection closed');
  };

  remoteConnection.onclose = () => {
    console.log('Remote connection closed');
  };

  localConnection.start();
  remoteConnection.start();
};
